name: 'NextJS lint'
on:
    push:
        branches: 
            [main]
    workflow_dispatch: 
    pull_request: 

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: '22' #Any node version
          cache: 'npm' 

      - name: Install dependencies
        run: npm ci

      - name: Run lint check
        run: npm run lint -- --format json --output-file eslint-report.json
        continue-on-error: true

      # Check if ESLint encountered any errors (exit code 1)
      - name: Check ESLint exit code
        id: check_exit_code
        run: |
          if [[ $? -ne 0 ]]; then
            echo "ESLint found errors, proceed with commenting."
            echo "lint_errors=true" >> $GITHUB_ENV
          else
            echo "No ESLint errors, skipping commenting."
            echo "lint_errors=false" >> $GITHUB_ENV
      
      - name: Comment on lint issue
        uses:  actions/github-script@e7aeb8c663f696059ebb5f9ab1425ed2ef511bdb
        # Only run if there were lint errors
        if: env.lint_errors == 'true' 
        with:
          script: |
            const fs = require('fs');
            const path = './eslint-report.json';
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));

            // Loop through the lint errors
            for (const file of report) {
              if (file.messages) {
                for (const message of file.messages) {
                  // Determine if it's a warning or error
                  // 1 = Warning, 2 = Error
                  const severity = message.severity; 
                  const prNumber = process.env.GITHUB_REF.split('/')[2]; // Get PR number from the ref
                  const lineNumber = message.line;

                  // Customize the comment based on the severity
                  const commentBody = `:${severity === 2 ? 'x' : 'warning'}: Lint ${severity === 2 ? 'error' : 'warning'} on line ${lineNumber}: ${message.message} (${message.ruleId})`;

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: commentBody,
                  });
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    
        # Ref: https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
      - name: Cache node modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
            # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
            path: |
                ~/.npm
                ${{ github.workspace }}/.next/cache
            # Generate a new cache whenever packages or source files change.
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
            # If source files changed but packages didn't, rebuild from a prior cache.
            restore-keys: |
                ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-